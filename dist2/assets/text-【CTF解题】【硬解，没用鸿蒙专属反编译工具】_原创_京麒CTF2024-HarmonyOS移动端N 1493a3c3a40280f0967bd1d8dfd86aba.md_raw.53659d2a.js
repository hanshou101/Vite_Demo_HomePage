const e='# \u3010CTF\u89E3\u9898\u3011\u3010\u786C\u89E3\uFF0C\u6CA1\u7528\u9E3F\u8499\u4E13\u5C5E\u53CD\u7F16\u8BD1\u5DE5\u5177\u3011[\u539F\u521B]\u4EAC\u9E92CTF2024-HarmonyOS\u79FB\u52A8\u7AEFNative\u5C42\u9006\u5411-HarmonyOS-\u770B\u96EA-\u5B89\u5168\u793E\u533A|\u5B89\u5168\u62DB\u8058|kanxue.com\n\nCreated: November 25, 2024 8:13 PM\nURL: https://bbs.kanxue.com/thread-282037.htm\n\u6587\u7AE0\u7C7B\u522B(\u6839\u636EWebStorm\u7684\u76EE\u5F55\u6765): \u9E3F\u8499HarmonyOS\n\u8BC4\u5206: 8\n\n**[\u539F\u521B]\u4EAC\u9E92CTF2024-HarmonyOS\u79FB\u52A8\u7AEFNative\u5C42\u9006\u5411**\xA0\u53D1\u8868\u4E8E: 2024-6-5 06:47\xA0\xA022374\xA0\u4E3E\u62A5\n\n---\n\n[\u9E3F\u8499HarmonyOS\u9006\u5411](https://bbs.kanxue.com/%E9%B8%BF%E8%92%99HarmonyOS%E9%80%86%E5%90%91.md)\n\n\u627E\u5230\u7684\u5DE5\u5177\uFF1A[HapViewer \u53D1\u884C\u7248 - Gitee.com](https://gitee.com/westinyang/hap-viewer/releases)\n\n# **\u67E5\u627E\u9E3F\u8499.hap\u6E90\u7801**\n\n\u9E3F\u8499\u9006\u5411\u76EE\u524D\u6CA1\u6709\u5B8C\u6574\u7684\u9006\u5411\u5DE5\u5177\u6240\u4EE5\u624B\u52A8\u9006\u5411\uFF1A\n\n\u5148\u5C06.hap\u6587\u4EF6\u540E\u7F00\u66F4\u6539\u4E3A.zip\u89E3\u538B\u540E\u5C31\u53EF\u4EE5\u770B\u89C1.hap\u7684\u6587\u4EF6\u7ED3\u6784\u4E86\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_2ZQW6Y2XAEYYCS2.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_2ZQW6Y2XAEYYCS2.jpg)\n\n.abc\u6587\u4EF6\u7C7B\u4F3C\u4E8E\u5B89\u5353\u7684.dex\u6587\u4EF6\uFF0C\u76F4\u63A5\u7528txt\u6587\u672C\u6253\u5F00\u53D1\u73B0\u5E76\u6CA1\u6709\u8FDB\u884C\u52A0\u5BC6\u6216\u8005\u6DF7\u6DC6\u6E90\u7801\u76F4\u63A5\u5728\u91CC\u9762\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_7YWQZF78F8Z2M5Z.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_7YWQZF78F8Z2M5Z.jpg)\n\n\u53D1\u73B0\u9700\u8981\u7528utf-8\u53EF\u4EE5\u89E3\u51B3\u90E8\u5206\u4E2D\u6587\u4E71\u7801\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_UM5QZF6X5MBEW4P.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_UM5QZF6X5MBEW4P.jpg)\n\n\u63D0\u53D6\u51FA\u4E3B\u8981\u7684\u4EE3\u7801\uFF1A\n\n```\n    constructor(parent, params, __localStorage, elmtId = -1) {\n        super(parent, __localStorage, elmtId);\n        this.context = getContext(this);\n        this.__message = new ObservedPropertySimplePU(\'\u8BF7\u8F93\u5165flag\', this, "message");\n        this.__button_name = new ObservedPropertySimplePU(\'\u63D0\u4EA4\', this, "button_name");\n        this.__flag = new ObservedPropertySimplePU(\'\', this, "flag");\n        this.__result = new ObservedPropertySimplePU(\'\', this, "result");\n        this.dialogController = new CustomDialogController({\n            builder: () => {\n                let jsDialog = new CustomDialogExample(this, {\n                    textValue: this.__result,\n                });\n                jsDialog.setController(this.dialogController);\n                ViewPU.create(jsDialog);\n            }\n        }, this);\n        this.setInitiallyProvidedValue(params);\n    }\n\n```\n\n\u8FD9\u6BB5\u4EE3\u7801\u521D\u59CB\u5316\u4E86\u4E00\u4E2Aflag\u63D0\u4EA4\u6846\uFF01\uFF01\uFF01\n\n```\n        this.observeComponentCreation((elmtId, isInitialRender) => {\n            ViewStackProcessor.StartGetAccessRecordingFor(elmtId);\n            Button.createWithLabel(this.button_name);\n            Button.onClick(() => {\n                this.context.resourceManager.getRawFileContent("bin").then((value) => {\n                    var c = testNapi.check(this.flag, value);\n                    if ((c & 0b100) === 0b100) {\n                        this.result = \'\u7CFB\u7EDF\u73AF\u5883\u5F02\u5E38\';\n                    }\n                    else if ((c & 0b10) === 0b10) {\n                        this.result = \'flag\u683C\u5F0F\u9519\u8BEF\';\n                    }\n                    else if ((c & 0b1) === 0b1) {\n                        this.result = \'flag\u9519\u8BEF\u6216\u7CFB\u7EDF\u73AF\u5883\u5F02\u5E38\';\n                    }\n                    else {\n                        this.result = \'flag\u6B63\u786E\';\n                    }\n                    this.dialogController.open();\n                });\n            });\n            if (!isInitialRender) {\n                Button.pop();\n            }\n            ViewStackProcessor.StopGetAccessRecording();\n        });\n\n```\n\n\u5728txt\u91CC\u9762\u627E\u5230\u4E86\u5224\u65ADflag\u7684\u6309\u94AE\uFF01\uFF01var c = testNapi.check(this.flag, value);\n\n\u53D1\u73B0\u8FD9\u91CC\u5C31\u6709check\u51FD\u6570\u53EF\u4EE5\u5224\u65ADflag\uFF01\n\n# **\u9501\u5B9A\u9E3F\u8499Native\u5C42\u65B9\u6CD5check()**\n\n\u53D1\u73B0testNapi\u90A3\u4E48\u5C31\u53EF\u4EE5\u5BF9\u6807\u5B89\u5353\u7684Native\u5C42\u65B9\u6CD5\u4E86\uFF1A[16.7\uFF1ANAPI \u52A0\u8F7D\u539F\u7406\uFF08\u4E0A\uFF09 | \u300AArkUI\u5B9E\u6218\u300B](https://www.arkui.club/chapter16/16_7_source.html#_16-7-1-hap-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84)\n\ntestNapi\u65B9\u6CD5\u662F\u5199\u5728libentry.so\u6587\u4EF6\u91CC\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_AWP35P5Y48RDYYR.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_AWP35P5Y48RDYYR.jpg)\n\n\u62D6\u5165ida\u76F4\u63A5\u5F00\u59CB\u67E5\u627E\uFF01\n\n\u5148\u4E86\u89E3\u9E3F\u8499\u7684Native\u5C42\u65B9\u6CD5\u6CE8\u518C\u6D41\u7A0B\uFF08\u9E3F\u8499\u7528\u7684\u662F\u9B54\u6539\u540E\u7684Node.js\u7684\u539F\u751F\u5E93ffi-napi\uFF09\uFF1A\n\n\u6CE8\u518C\u65B9\u6CD5\uFF1A`RegisterEntryModule`-\u300B`napi_module_register`-\u300B\u8981\u6CE8\u518C\u65B9\u6CD5\u7684\u7ED3\u6784\u4F53`napi_module`\n\n```\ntypedef struct napi_module {\n    int nm_version;\n    unsigned int nm_flags;\n    void* nm_filename;\n    napi_addon_register_func nm_register_func;\n    void* nm_modname;\n    void* nm_priv;\n    void* reserved[4];\n} napi_module;\n\n```\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_HH2568MR9XTJEZ5.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_HH2568MR9XTJEZ5.jpg)\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_KESP2JNNXXQ896Y.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_KESP2JNNXXQ896Y.jpg)\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_6JP25GZ5YJU8WH2.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_6JP25GZ5YJU8WH2.jpg)\n\n\u53D1\u73B0\u8FD9\u4E2Acheck\u65B9\u6CD5\u662F\u5728\u8FD9\u91CC\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_4ADMF4SQ9CPSV5G.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_4ADMF4SQ9CPSV5G.jpg)\n\n\u627E\u5230check\u65B9\u6CD5\uFF01\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_YQSBBQXDMRDJS9Y.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_YQSBBQXDMRDJS9Y.jpg)\n\n# **\u9E3F\u8499\u5F00\u53D1\u77E5\u8BC6\u63D0\u524D\u4E86\u89E3**\n\n\u8FD9\u91CC\u6709\u5F88\u591Aapi\u7279\u522B\u91CD\u8981\u5148\u63D0\u524D\u4E86\u89E3\u4E00\u6CE2\uFF1A\n\n\u8FD9\u4E9Bapi\u7684\u6765\u6E90\u90FD\u662Fjs\u7684[Node-API](https://nodejs.cn/api/n-api.html),\u534E\u4E3A\u7528ArkTS\u53C8\u5C01\u88C5\u4E86\u4E00\u904D\uFF1A\n\n\u95EEchatgpt\u5C31\u53EF\u4EE5\u77E5\u9053\u4ED6\u4EEC\u7684\u4F5C\u7528\uFF1A\n\n```\nnapi_get_cb_info\nnapi_get_value_string_utf8\nnapi_get_typedarray_info\nnapi_get_reference_value\nnapi_call_function\nnapi_create_int32\nnapi_coerce_to_bool\n\n```\n\n## **napi_call_function\u51FD\u6570\u548CTS\u7684testNapi.register\u56DE\u8C03\u51FD\u6570**\n\n\u5728\u4E4B\u524D\u627E\u5230\u7684\u6E90\u7801\u533A\uFF1A\n\n```\naboutToAppear() {\n    // \u6CE8\u518C testNapi \u5904\u7406\u7A0B\u5E8F\uFF0C\u9488\u5BF9\u4E0D\u540C\u7684 batteryInfo \u5C5E\u6027\u8FDB\u884C\u6BD4\u8F83\u548C\u8FD4\u56DE\u7ED3\u679C\n    // \u7535\u6C60\u5269\u4F59\u7535\u91CF\u5DEE\u503C\u5224\u65AD\n    testNapi.register(0, (a) => {\n        var t = batteryInfo.batterySOC - a;\n        var f;\n        if (t > 0)\n            f = 1;\n        else if (t == 0)\n            f = 0;\n        else\n            f = -1;\n        return f === 0;\n    });\n...\n    // \u76F4\u63A5\u8FD4\u56DE\u7535\u6C60\u6E29\u5EA6\n    testNapi.register(262, () => {\n        return batteryInfo.batteryTemperature;\n    });\n    // \u76F4\u63A5\u8FD4\u56DE\u7535\u6C60\u662F\u5426\u5B58\u5728\n    testNapi.register(263, () => {\n        return batteryInfo.isBatteryPresent;\n    });\n    // \u76F4\u63A5\u8FD4\u56DE\u7535\u6C60\u5BB9\u91CF\u7B49\u7EA7\n    testNapi.register(264, () => {\n        return batteryInfo.batteryCapacityLevel;\n    });\n}\n\n```\n\n\u8FD9\u4E9B\u4EE3\u7801\u5C31\u662F\u5728ArkTS\u6E90\u7801\u533A\u6CE8\u518C\u7684\u56DE\u8C03\u51FD\u6570\uFF0CNative\u5C42\u7684napi_call_function\u51FD\u6570\u53EF\u4EE5\u901A\u8FC7\u5E8F\u53F7\u8C03\u7528\u8FD9\u4E9BArkTs\u5C42\u7684\u4EE3\u7801\uFF01\n\n# **\u5F00\u59CB\u5206\u6790Native\u5C42\u65B9\u6CD5check()\u65B9\u6CD5**\n\n\u5148\u8FDB\u884C\u90E8\u5206\u5206\u6790\uFF0C\u6700\u540E\u518D\u6C47\u603B\u5206\u6790\u6240\u6709\u4F2A\u4EE3\u7801\uFF01\n\n## **\u91CD\u70B9\u5173\u6CE8\u4E00\u4E0BSO\u6587\u4EF6\u91CC\u7684API\u51FD\u6570**\n\nNative\u5C42\u7684\u83B7\u53D6\u56DE\u8C03\u51FD\u6570\u7684\u51FD\u6570\uFF1A\n\n```\n// \u901A\u8FC7bin_i\u7684\u503C\u83B7\u53D6\u6CE8\u518C\u5728TS\u7684\u4EE3\u7801\uFF0C\u5C06\u6CE8\u518C\u7684\u65B9\u6CD5\u5B58\u653E\u4E8Ereg_method_0\nnapi_get_reference_value(env, *(v29 + 40), &reg_method_0);\n// \u901A\u8FC7bin_i_or_100\u7684\u503C\u83B7\u53D6\u6CE8\u518C\u5728TS\u7684\u4EE3\u7801\uFF0C\u5C06\u51FD\u6570\u5B58\u653E\u5728reg_method_1\nnapi_get_reference_value(env, *(v36 + 40), &reg_method_1);\n\n```\n\n\u4E0B\u9762\u5206\u6790\u4E00\u4E0B\u903B\u8F91\u4F2A\u4EE3\u7801\uFF1A\n\n### **\u6839\u636E\u8FD9\u4E2A\u4E24\u4E2A\u83B7\u53D6\u56DE\u8C03\u51FD\u6570\u5730\u5740\u7684\u51FD\u6570\u6211\u4EEC\u53EF\u4EE5\u731C\u6D4B\u51FAcheck\u65B9\u6CD5\u5206\u4E3A\u4E09\u4E2A\u90E8\u5206\uFF1A**\n\n### **1. \u6839\u636E`bin[i]`\u83B7\u53D6reg_method_0\u5730\u5740\u548Creg_method_1\u5730\u5740\u7684\u67E5\u627E\u4EE3\u7801**\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_K9MR5UXM6N34X9Q.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_K9MR5UXM6N34X9Q.jpg)\n\n### **2. \u627E\u5230\u51FD\u6570\u540E\u6839\u636E`bin[i+1]`\u83B7\u53D6VM\u6267\u884C\u6D41\u7A0B**\n\n- `bin[i+1]`\xA0== 0\n    \n    ![https://bbs.kanxue.com/upload/attach/202406/970470_T86AYT8ZTDBXWWG.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_T86AYT8ZTDBXWWG.jpg)\n    \n- `bin[i+1]`\xA0== 1\n    \n    ![https://bbs.kanxue.com/upload/attach/202406/970470_UMVRVCB7V8GCV6V.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_UMVRVCB7V8GCV6V.jpg)\n    \n- `bin[i+1]`\xA0== 2\n    \n    ![https://bbs.kanxue.com/upload/attach/202406/970470_A8ETX452BPBHUUX.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_A8ETX452BPBHUUX.jpg)\n    \n\n### **3. \u5728\u68C0\u67E5\u5B8C\u73AF\u5883\u95EE\u9898\u540E\u8FDB\u884C\u52A0\u5BC6\u7684\u91CD\u91CF\u7EA7\u90E8\u5206**\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_VGXPU7RJQWR9YEM.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_VGXPU7RJQWR9YEM.jpg)\n\n## **\u6839\u636E`bin[i+1]`\u7684\u503C\u5206\u6790\u4E0D\u540C\u63A7\u5236\u6D41\u6240\u6267\u884C\u7684\u903B\u8F91**\n\nreg_method_1\u65B9\u6CD5\u5728\u88AB\u627E\u5230\u7684\u90A3\u4E00\u523B\u5C31\u88AB\u6267\u884C\u4E86\uFF0C\u8FD4\u56DE\u503C\u662Fmethod_1_ret\uFF1A\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_AKQS2GTAJRYT66A.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_AKQS2GTAJRYT66A.jpg)\n\n### **1.\u5F53`bin[i+1]`\xA0== 0**\n\n| 123456789101112131415161718 | **`else`**\xA0**`if`**\xA0`( !keyvalue )// keyvalue==0\uFF0Cmethod_1_ret\u88AB\u8F6C\u4E3Aint32\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570{//VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A04\xA0\xA0v40 = targetidx + 4;//\u83B7\u53D6bin[i+3]\u4F5C\u4E3A\u6574\u6570\xA0\xA0napi_create_int32(env, *(bin + targetidx + 3), &int_3_arg);//\u8C03\u7528reg_method_0(bin[i+3])\u5F97\u5230\u8FD4\u56DE\u503C\u2014\u2014\u300Bmethodfun_0_ret\xA0\xA0napi_call_function(env,**this**,reg_method_0,1,&int_3_arg, &methodfun_0_ret);//\u5C06reg_method_1\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u4F5C\u4E3Aswitch_case_key\xA0\xA0napi_get_value_int32(env, method_1_ret, &method_1_ret_bool);// \u8F6C\u4E3Aint32\xA0\xA0LOBYTE(switch_case_key) = method_1_ret_bool;}`\xA0`1. VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A042. \u83B7\u53D6bin[i+3]\u4F5C\u4E3A\u6574\u65703. \u8C03\u7528reg_method_0(bin[i+3])\u5F97\u5230\u8FD4\u56DE\u503C\u2014\u2014\u300Bmethodfun_0_ret4. \u5C06reg_method_1\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u4F5C\u4E3Aswitch_case_key\u6CE8\uFF1Aswitch_case_key\u7528\u6765\u52A0\u5BC6` |\n| --- | --- |\n\n### **2.\u5F53`bin[i+1]`\xA0== 1**\n\n| 123456789101112131415161718192021222324 | `v40 = targetidx + 3;//VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A0\u4E0A3// keyvalue == 1\uFF0Cmethod_1_ret\u8FD4\u56DE\u503C\u88AB\u8F6C\u4E3Autf8\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570**if**`\xA0`( keyvalue == 1 )\xA0\xA0{\xA0\xA0\xA0\xA0//\u83B7\u53D6bin[i+2]\u7684\u503C\u4F5C\u4E3Asize\xA0\xA0\xA0\xA0\xA0size = *(bin + targetidx + 2);\xA0\xA0\xA0\xA0\xA0//\u83B7\u53D6bin + v40\u4E2D\u7684\u5B57\u7B26\u4E32\uFF0C\u5176\u5B9E\u5C31\u662Fbin[i+3]\xA0\xA0\xA0\xA0\xA0napi_create_string_utf8(env, bin + v40, size, &int_3_arg);\xA0\xA0\xA0\xA0\xA0v40 += size;//VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A0\u4E0A\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\xA0\xA0\xA0\xA0\xA0env_1 = env;\xA0\xA0\xA0\xA0\xA0//\u8C03\u7528reg_method_0\u51FD\u6570\uFF0C\u5C06\u5B57\u7B26\u4E32int_3_arg\u4F20\u5165reg_method_0\u51FD\u6570\xA0\xA0\xA0\xA0\xA0napi_call_function(env,\xA0**this**, reg_method_0, 1LL, &int_3_arg, &methodfun_0_ret);\xA0\xA0\xA0\xA0\xA0//\u5F97\u5230\u8FD4\u56DE\u503Creg_method_0\u51FD\u6570\u7684\u8FD4\u56DE\u503C\xA0\xA0\xA0\xA0\xA0napi_get_value_string_utf8(env, method_1_ret, buf, 128LL, &stringlen1);\xA0\xA0\xA0\xA0\xA0**if**`\xA0`( stringlen1 )\xA0\xA0\xA0\xA0\xA0{....}1. VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A0\u4E0A32. \u83B7\u53D6bin[i+2]\u7684\u503C\u4F5C\u4E3Asize3. \u83B7\u53D6bin + v40\u4E2D\u7684\u5B57\u7B26\u4E32\uFF0C\u5176\u5B9E\u5C31\u662Fbin[i+3]4. VM\u6574\u4F53\u64CD\u4F5C\u6D41\u7A0B\u5E8F\u53F7\u52A0\u4E0A\u5B57\u7B26\u4E32\u7684\u957F\u5EA65. \u8C03\u7528reg_method_0\u51FD\u6570\uFF0C\u5C06\u5B57\u7B26\u4E32int_3_arg\u4F20\u5165reg_method_0\u51FD\u65706. \u5F97\u5230\u8FD4\u56DE\u503Creg_method_0\u51FD\u6570\u7684\u8FD4\u56DE\u503C` |\n| --- | --- |\n\n### **3.\u5F53`bin[i+1]`\xA0== 2**\n\n| 123456789101112131415161718 | **`if`**\xA0`( keyvalue == 2 )// keyvalue == 2\uFF0Cmethod_1_ret\u7684\u8FD4\u56DE\u503C\u88AB\u8F6C\u4E3Abool\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570{//\u83B7\u53D6bin[i+3]\u7684\u503C\u4F5C\u4E3Aint_3_arg\xA0\xA0napi_create_int32(env, *(bin + targetidx + 3), &int_3_arg);\xA0\xA0//\u8F6C\u6362\u7C7B\u578Bint32-\u300Bbool\xA0\xA0napi_coerce_to_bool(env, int_3_arg, &int_3_arg);\xA0\xA0//\u8C03\u7528reg_method_0(int_3_arg)->\u8FD4\u56DE\u503Cmethodfun_0_ret\xA0\xA0napi_call_function(env,\xA0**this**, reg_method_0, 1LL, &int_3_arg, &methodfun_0_ret);\xA0\xA0//\u5C06reg_method_1\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u4F5C\u4E3Aswitch_case_key\xA0\xA0napi_get_value_bool(env, method_1_ret, &method_1_ret_bool);\xA0\xA0LOBYTE(switch_case_key) = method_1_ret_bool;\xA0\xA0v40 = targetidx + 4;}1. \u83B7\u53D6bin[i+3]\u7684\u503C\u4F5C\u4E3Aint_3_arg2. \u8F6C\u6362\u7C7B\u578Bint32-\u300B**bool**3. \u8C03\u7528reg_method_0(int_3_arg)4. \u5C06reg_method_1\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u4F5C\u4E3Aswitch_case_key\u6CE8\uFF1Aswitch_case_key\u7528\u6765\u52A0\u5BC6` |\n| --- | --- |\n\n## **\u5206\u6790\u5B8C\u6267\u884C\u6D41\u7A0B\u901A\u8FC7Python\u6765\u7B80\u5316\u4E00\u4E0B**\n\n| 12345678910111213141516171819202122232425262728293031323334353637 | **`def`**\xA0`dump_bin(bin):\xA0\xA0\xA0\xA0d\xA0**=**`\xA0`[]\xA0\xA0\xA0\xA0pc\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0**while**`\xA0`pc <\xA0len(bin):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0op\xA0**=**`\xA0`bin[pc]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'####################\', pc, op)`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`# \u83B7\u53D6\u51FD\u6570\u5730\u5740reg_method_0,\u901A\u8FC7bin[pc]\u67E5\u627E\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'reg_method_0 = func[%d]\' % (op))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# \u83B7\u53D6\u51FD\u6570\u5730\u5740reg_method_1,\u901A\u8FC7bin[pc] | 0x100 \u67E5\u627E\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u8C03\u7528reg_method_1\u83B7\u5F97\u8FD4\u56DE\u503C\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_1_ret = call func[%d]\'`\xA0**`%`**\xA0`(op |\xA00x100))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u83B7\u53D6\u64CD\u4F5C\u7C7B\u578B\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`type`\xA0**`==`**\xA0`0`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%d)\'`\xA0**`%`**\xA0`(op,\xA0bin[pc\xA0**+**`\xA0`3]))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u83B7\u53D6bin\u4E2D\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0size\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`2]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0s\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3: pc\xA0**+**`\xA0`3`\xA0**`+`**\xA0`size]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%s)\'`\xA0**`%`**\xA0`(op,\xA0repr(s)))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3`\xA0**`+`**\xA0`size\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`2`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%d)\'`\xA0**`%`**\xA0`(op,\xA0bin[pc\xA0**+**`\xA0`3]))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`False\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0d.append((op, key))\xA0\xA0\xA0\xA0**return**`\xA0`dwith\xA0open(r\'.\\bin\',\xA0\'rb\') as\xA0file:\xA0\xA0\xA0\xA0encrypted_data\xA0**=**`\xA0`file.read()`\xA0`print(dump_bin(encrypted_data))` |\n| --- | --- |\n\n\u5F97\u5230\u6267\u884C\u6D41\u7A0B\uFF1A\n\n| 123456789101112131415161718192021222324252627 | `#################### 0 3method_1_ret = call func[259]method_0_ret = call func[3](1)#################### 4 0method_1_ret = call func[256]method_0_ret = call func[0](100)#################### 8 4method_1_ret = call func[260]method_0_ret = call func[4](10)#################### 12 7method_1_ret = call func[263]method_0_ret = call func[7](0)#################### 16 5method_1_ret = call func[261]method_0_ret = call func[5](b\'hackers\')#################### 26 8method_1_ret = call func[264]method_0_ret = call func[8](1)#################### 30 1method_1_ret = call func[257]method_0_ret = call func[1](3)#################### 34 6method_1_ret = call func[262]method_0_ret = call func[6](50)#################### 38 2method_1_ret = call func[258]method_0_ret = call func[2](2)` |\n| --- | --- |\n\n## **\u7ED5\u8FC7ArkTS\u5C42\u7684\u73AF\u5883\u5F02\u5E38\u68C0\u6D4B**\n\nArkTS\u5C42\u6CE8\u518C\u7684\u56DE\u8C03\u51FD\u6570\u6709\u5F88\u591A\u6211\u5C31\u622A\u53D6\u4E86\u90E8\u5206\uFF1A\n\n```\naboutToAppear() {\n        // \u7535\u6C60\u63D2\u5165\u7C7B\u578B\u5DEE\u503C\u5224\u65AD\n        testNapi.register(3, (a) => {\n            var t = batteryInfo.pluggedType - a;\n            var f;\n            if (t > 0)\n                f = 1;\n            else if (t == 0)\n                f = 0;\n            else\n                f = -1;\n            return f === 0;\n        });\n        ....\n        // \u76F4\u63A5\u8FD4\u56DE\u7535\u6C60\u63D2\u5165\u7C7B\u578B\n        testNapi.register(259, () => {\n            return batteryInfo.pluggedType;\n        });\n}\n\n```\n\n\u8FD9\u91CC\u662F\u5199\u5728ArkTS\u5C42\u7684\u56DE\u8C03\u51FD\u6570\u4EE3\u7801\uFF01\n\n\u53D1\u73B0\u8FD9\u4E9B\u56DE\u8C03\u51FD\u6570\u7684id\uFF1A3\uFF0C259\uFF1B0\uFF0C256\uFF1B\u7B49\u7B49...\n\n\u8FD9\u91CC\u76D1\u6D4B\u73AF\u5883\u5F02\u5E38\u4E3B\u8981\u662F\u901A\u8FC7\u68C0\u67E5\u7535\u6C60\u4FE1\u606F\u662F\u5426\u548C\u9884\u5B9A\u7684\u6570\u636E\u4E00\u6837\u4E0D\u4E00\u6837\u5219\u5224\u5B9A\u73AF\u5883\u5F02\u5E38\uFF1A\n\n### **\u6839\u636E\u8DD1\u51FA\u6765\u7684\u56DE\u8C03\u51FD\u6570\u7684\u6CE8\u518C\u7801\u5728ArkTS\u5C42\u627E\u51FD\u6570**\n\n| 12345678910111213141516171819 | `method_1_ret = call func[259]// \u76F4\u63A5\u8FD4\u56DE\u7535\u6C60\u63D2\u5165\u7C7B\u578BtestNapi.**register**(259, () => {\xA0\xA0\xA0\xA0**return**`\xA0`batteryInfo.pluggedType;});`\xA0`method_0_ret = call func[3](1)// \u7535\u6C60\u63D2\u5165\u7C7B\u578B\u5DEE\u503C\u5224\u65ADtestNapi.**register**(3, (a) => {\xA0\xA0\xA0\xA0var t = batteryInfo.pluggedType - a;\xA0\xA0\xA0\xA0var f;\xA0\xA0\xA0\xA0**if**`\xA0`(t > 0)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0f = 1;\xA0\xA0\xA0\xA0**else**`\xA0**`if`**\xA0`(t == 0)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0f = 0;\xA0\xA0\xA0\xA0**else**\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0f = -1;\xA0\xA0\xA0\xA0**return**`\xA0`f === 0;});` |\n| --- | --- |\n\n\u518D\u6839\u636Eso\u5C42\u7684\u4EE3\u7801\u5206\u6790\u53EF\u4EE5\u77E5\u9053\uFF1A\n\nmethod_0_ret\u7684\u8FD4\u56DE\u503C\u5FC5\u987B\u662F\u975E0\u624D\u53EF\u4EE5\u901A\u8FC7\u73AF\u5883\u76D1\u6D4B\uFF0C\u8FD9\u91CC\u4E5F\u5C31\u662F\u8981\u6C42\uFF1A\n\n| 1 | `batteryInfo.pluggedType \u7684\u503C\u7B49\u4E8E 1\xA0 \u5C31\u53EF\u4EE5\u901A\u8FC7\u73AF\u5883\u68C0\u67E5\uFF01\uFF01` |\n| --- | --- |\n\n\u4F9D\u6B21\u7C7B\u63A8\u4E5F\u5C31\u53EF\u4EE5\u77E5\u9053\u5982\u4F55\u7ED5\u8FC7\u73AF\u5883\u76D1\u6D4B\u4E86\uFF01\n\n\u77E5\u8BC6\u8FDE\u63A5\uFF1A[OpenHarmony4.0\u6E90\u7801\u89E3\u6790\u4E4B\u7535\u6E90\u7BA1\u7406\u5B50\u7CFB\u7EDF - \u6587\u7AE0 OpenHarmony\u5F00\u53D1\u8005\u8BBA\u575B](https://forums.openharmony.cn/forum.php?mod=viewthread&tid=616)\n\n```\nbatteryInfo.batterySOC           256\nbatteryInfo.chargingStatus       257\nbatteryInfo.healthStatus         258\nbatteryInfo.pluggedType          259\nbatteryInfo.voltage              260\nbatteryInfo.technology           261\nbatteryInfo.batteryTemperature   262\nbatteryInfo.isBatteryPresent     263\nbatteryInfo.batteryCapacityLevel 264\n\n```\n\n\u5199\u4E2A\u811A\u672C\u6765\u770B\u770B\u9700\u8981\u7684\u8BBE\u7F6E\u7684\u7535\u6C60\u6570\u636E\uFF0C\u6765\u7ED5\u8FC7\u73AF\u5883\u5F02\u5E38\u68C0\u6D4B\uFF1A\n\n| 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 | **`def`**\xA0`dump_bin(bin):\xA0\xA0\xA0\xA0d\xA0**=**`\xA0`[]\xA0\xA0\xA0\xA0pc\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0**while**`\xA0`pc <\xA0len(bin):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0op\xA0**=**`\xA0`bin[pc]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'------------->\', pc, op)`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`# \u83B7\u53D6\u51FD\u6570\u5730\u5740reg_method_0,\u901A\u8FC7bin[pc]\u67E5\u627E\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'reg_method_0 = func[%d]\' % (op))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# \u83B7\u53D6\u51FD\u6570\u5730\u5740reg_method_1,\u901A\u8FC7bin[pc] | 0x100 \u67E5\u627E\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u8C03\u7528reg_method_1\u83B7\u5F97\u8FD4\u56DE\u503C\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_1_ret = call func[%d]\'`\xA0**`%`**\xA0`(op |\xA00x100))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`256`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.batterySOC:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`257`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.chargingStatus:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`258`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.healthStatus:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`259`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.pluggedType:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`260`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.voltage:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`261`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.technology:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`262`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.batteryTemperature:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`263`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.isBatteryPresent:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`(op |\xA00x100)\xA0**==**`\xA0`264`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print("batteryInfo.batteryCapacityLevel:",end**=**"")\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u83B7\u53D6\u64CD\u4F5C\u7C7B\u578B\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`type`\xA0**`==`**\xA0`0`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(bin[pc\xA0**+**`\xA0`3])\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%d)\'`\xA0**`%`**\xA0`(op,\xA0bin[pc\xA0**+**`\xA0`3]))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0#\u83B7\u53D6bin\u4E2D\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0size\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`2]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0s\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3: pc\xA0**+**`\xA0`3`\xA0**`+`**\xA0`size]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(repr(s))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%s)\'`\xA0**`%`**\xA0`(op,\xA0repr(s)))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3`\xA0**`+`**\xA0`size\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`2`\xA0`:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(bin[pc\xA0**+**`\xA0`3])\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0print(\'method_0_ret = call func[%d](%d)\'`\xA0**`%`**\xA0`(op,\xA0bin[pc\xA0**+**`\xA0`3]))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`False\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0d.append((op, key))\xA0\xA0\xA0\xA0**return**`\xA0`dwith\xA0open(r\'.\\bin\',\xA0\'rb\') as\xA0file:\xA0\xA0\xA0\xA0encrypted_data\xA0**=**`\xA0`file.read()`\xA0`print(dump_bin(encrypted_data))` |\n| --- | --- |\n\n\u8981\u6C42\u7684\u7535\u6C60\u73AF\u5883,\u6210\u529F\u7ED5\u8FC7\uFF1A\n\n```\n-------------> 0 3\nbatteryInfo.pluggedType:1\n-------------> 4 0\nbatteryInfo.batterySOC:100\n-------------> 8 4\nbatteryInfo.voltage:10\n-------------> 12 7\nbatteryInfo.isBatteryPresent:0\n-------------> 16 5\nbatteryInfo.technology:b\'hackers\'\n-------------> 26 8\nbatteryInfo.batteryCapacityLevel:1\n-------------> 30 1\nbatteryInfo.chargingStatus:3\n-------------> 34 6\nbatteryInfo.batteryTemperature:50\n-------------> 38 2\nbatteryInfo.healthStatus:2\n\n```\n\n## **\u5206\u6790Check\u51FD\u6570\u7684\u52A0\u5BC6\u903B\u8F91**\n\n| 12345678910111213141516171819202122 | **`do**{\xA0\xA0**if**`\xA0`valuekey == 0:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0switch_case_key...\xA0\xA0**if**`\xA0`valuekey == 1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0switch_case_key...\xA0\xA0**if**`\xA0`valuekey == 2:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0switch_case_key...\xA0\xA0\xA0\xA0....\xA0\xA0**switch**`\xA0`( bin_i )\xA0\xA0{\xA0\xA0\xA0\xA0**case**`\xA0`0:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0....\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0v54 = switch_case_key & 0x3F | (switch_case_key >> 1) & 0x40 | (2 * switch_case_key) & 0x80;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0....\xA0\xA0\xA0\xA0**case**`\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0.....\xA0\xA0\xA0\xA0**case**`\xA0`8:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0....\xA0\xA0}}**while**`\xA0`( v40 < bin_len );` |\n| --- | --- |\n\n\u7EE7\u7EED\u5206\u6790\u53D1\u73B0switch\u91CC\u9762\u7684\u52A0\u5BC6\u548Cswitch_case_key\u7684\u5173\u7CFB\u7279\u522B\u5927\uFF0C\u6839\u636E\u4EA4\u53C9\u5F15\u7528\u53EF\u4EE5\u627E\u5230\u76F8\u5173\u903B\u8F91\uFF1A\n\n### **\u6839\u636E`bin[i+1]`\u7684\u503C\u4E0D\u540C\u5BFC\u81F4switch_case_key\u7684\u503C\u4E5F\u4E0D\u540C**\n\nreg_method_1\u65B9\u6CD5\u5728\u88AB\u627E\u5230\u7684\u90A3\u4E00\u523B\u5C31\u88AB\u6267\u884C\u4E86\uFF0C\u8FD4\u56DE\u503C\u662Fmethod_1_ret\n\n### **1.\u5F53`bin[i+1]`\xA0== 0**\n\n| 12345678 | **`else`**\xA0**`if`**\xA0`( !keyvalue )\xA0\xA0\xA0// keyvalue==0\uFF0Cmethod_1_ret\u88AB\u8F6C\u4E3Aint32\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570{\xA0\xA0v40 = targetidx + 4;\xA0\xA0napi_create_int32(env, *(bin + targetidx + 3), &int_3_arg);\xA0\xA0napi_call_function(env,\xA0**this**, reg_method_0, 1LL, &int_3_arg, &methodfun_0_ret);\xA0\xA0napi_get_value_int32(env, method_1_ret, &method_1_ret_bool);// \u8F6C\u4E3Aint32\xA0\xA0LOBYTE(switch_case_key) = method_1_ret_bool;}` |\n| --- | --- |\n\n\u6839\u636E\u524D\u9762\u7684ArkTS\u5C42\u51FD\u6570\u7684\u8C03\u7528\u89C4\u5219\u53EF\u4EE5\u77E5\u9053\uFF1A\n\n1. reg_method_1\u51FD\u6570\u5C31\u662F\u7528\u6765\u8FD4\u56DE\u5F53\u524D\u7535\u6C60\u72B6\u6001\u4FE1\u606F\u7684\uFF01\n2. \u800Creg_method_0\u51FD\u6570\u5C31\u662F\u7528\u6765\u68C0\u67E5\u7535\u6C60\u4FE1\u606F\u662F\u5426\u7B26\u5408\u8981\u6C42\u7684\uFF01\n3. \u4ECE\u800C\u4E5F\u5C31\u53EF\u4EE5\u786E\u5B9Aswitch_case_key\u7684\u503C\u4E86\uFF01`(bin + targetidx + 3)`\u7528python\u811A\u672C\u5C31\u662F\uFF1A\n\n| 12345 | `op\xA0**=**`\xA0`bin[pc]type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]**if**`\xA0`type`\xA0**`==`**\xA0`0:\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4` |\n| --- | --- |\n\n### **2.\u5F53`bin[i+1]`\xA0== 1**\n\n| 1234567891011121314151617181920212223242526272829 | `**if**`\xA0`( keyvalue == 1 )\xA0// keyvalue == 1\uFF0Cmethod_1_ret\u8FD4\u56DE\u503C\u88AB\u8F6C\u4E3Autf8\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0size = *(bin + targetidx + 2);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0napi_create_string_utf8(env, bin + v40, size, &int_3_arg);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0v40 += size;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0env_1 = env;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0napi_call_function(env,\xA0**this**, reg_method_0, 1LL, &int_3_arg, &methodfun_0_ret);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0napi_get_value_string_utf8(env, method_1_ret, buf, 128LL, &stringlen1);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`( stringlen1 )\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`( stringlen1 < 0x20 )\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0idx1 = 0LL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0switch_case_key = 0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**goto**`\xA0`LABEL_56;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0idx1 = stringlen1 & 0xFFFFFFFFFFFFFFE0LL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`( (stringlen1 & 0xFFFFFFFFFFFFFFE0LL) - 32 >= 0x60 )\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0{....\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**while**`\xA0`( stringlen1 != idx1 )LABEL_56:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOBYTE(switch_case_key) = buf[idx1++] ^ switch_case_key;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0switch_case_key = 0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}` |\n| --- | --- |\n1. \u901A\u8FC7\u524D\u9762\u7684python\u811A\u672C\u53EF\u77E5\uFF1A`bin[i+1]`\xA0== 1\u7684\u503C\u4F1A\u53BB\u68C0\u6D4B\uFF1AbatteryInfo.technology:b\'hackers\'\n2. `(bin + targetidx + 2)`\u662F\u5B57\u7B26\u4E32\u957F\u5EA6\n3. \u77E5\u9053\u6B63\u786E\u7684\u7535\u6C60\u4FE1\u606F\u540E\u5C31\u53EF\u4EE5\u77E5\u9053 b\'hackers\'.len \u7B49\u4E8E 7 \uFF0C\u6240\u4EE5 stringlen1 < 0x20\n4. switch_case_key\u7684\u8BA1\u7B97\u6D41\u7A0B\u5C31\u4F1A\u8FDB\u5165LABEL_56\n5. \u4E5F\u5C31\u662F\u4E0B\u9762\u7684\u7B97\u6CD5\uFF1A\n\n| 12 | **`while`**\xA0`( stringlen1 != idx1 )\xA0\xA0\xA0\xA0LOBYTE(switch_case_key) = buf[idx1++] ^ switch_case_key;` |\n| --- | --- |\n\n\u7528python\u811A\u672C\u5C31\u662F\uFF1A\n\n| 12345678 | `op\xA0**=**`\xA0`bin[pc]type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0size\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`2]\xA0\xA0\xA0\xA0s\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3: pc\xA0**+**`\xA0`3`\xA0**`+`**\xA0`size]\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0**for**`\xA0`i\xA0**in**`\xA0`s: key ^**=**`\xA0`i\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3`\xA0**`+`**\xA0`size` |\n| --- | --- |\n\n### **3.\u5F53`bin[i+1]`\xA0== 2**\n\n| 123456789 | **`if`**\xA0`( keyvalue == 2 )\xA0\xA0\xA0// keyvalue == 2\uFF0Cmethod_1_ret\u7684\u8FD4\u56DE\u503C\u88AB\u8F6C\u4E3Abool\uFF0C\u4F20\u5165\u4E00\u4E2A\u53C2\u6570{\xA0\xA0napi_create_int32(env, *(bin + targetidx + 3), &int_3_arg);\xA0\xA0napi_coerce_to_bool(env, int_3_arg, &int_3_arg);\xA0\xA0napi_call_function(env,\xA0**this**, reg_method_0, 1LL, &int_3_arg, &methodfun_0_ret);\xA0\xA0napi_get_value_bool(env, method_1_ret, &method_1_ret_bool);\xA0\xA0LOBYTE(switch_case_key) = method_1_ret_bool;\xA0\xA0v40 = targetidx + 4;}` |\n| --- | --- |\n\n\u6839\u636E\u524D\u9762\u7684ArkTS\u5C42\u51FD\u6570\u7684\u8C03\u7528\u89C4\u5219\u53EF\u4EE5\u77E5\u9053\uFF1A\n\n1. reg_method_1\u51FD\u6570\u5C31\u662F\u7528\u6765\u8FD4\u56DE\u5F53\u524D\u7535\u6C60\u72B6\u6001\u4FE1\u606F\u7684\uFF01\n2. \u800Creg_method_0\u51FD\u6570\u5C31\u662F\u7528\u6765\u68C0\u67E5\u7535\u6C60\u4FE1\u606F\u662F\u5426\u7B26\u5408\u8981\u6C42\u7684\uFF01\n3. \u4ECE\u800C\u4E5F\u5C31\u53EF\u4EE5\u786E\u5B9Aswitch_case_key\u7684\u503C\u4E86\uFF01`(bin + targetidx + 3)`\u7528python\u811A\u672C\u5C31\u662F\uFF1A\n\n| 12345 | `op\xA0**=**`\xA0`bin[pc]type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]**if**`\xA0`type`\xA0**`==`**\xA0`2:\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4` |\n| --- | --- |\n\n### **\u6210\u529F\u5F97\u5230VMopcode\u7684\u52A0\u5BC6\u6D41\u7A0B\u548C\u52A0\u5BC6\u5BC6\u94A5switch_case_key**\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_DPE2ZXMQB9Q9CNH.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_DPE2ZXMQB9Q9CNH.jpg)\n\n| 1234567891011121314151617181920212223242526 | **`def`**\xA0`dump_bin(bin):\xA0\xA0\xA0\xA0d\xA0**=**`\xA0`[]\xA0\xA0\xA0\xA0pc\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0**while**`\xA0`pc <\xA0len(bin):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0op\xA0**=**`\xA0`bin[pc]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`type`\xA0**`==`**\xA0`2`\xA0**`or`**\xA0`type`\xA0**`==`**\xA0`0:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0size\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`2]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0s\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3: pc\xA0**+**`\xA0`3`\xA0**`+`**\xA0`size]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`i\xA0**in**`\xA0`s: key ^**=**`\xA0`i\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3`\xA0**`+`**\xA0`size\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`False\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0d.append((op, key))\xA0\xA0\xA0\xA0**return**`\xA0`d`\xA0`with\xA0open(r\'.\\bin\',\xA0\'rb\') as\xA0file:\xA0\xA0\xA0\xA0encrypted_data\xA0**=**`\xA0`file.read()`\xA0`print(dump_bin(encrypted_data))# [(3, 1), (0, 100), (4, 10), (7, 0), (5, 101), (8, 1), (1, 3), (6, 50), (2, 2)]` |\n| --- | --- |\n\n\u7B2C\u4E00\u4E2A\u503C\u662Fopcode\uFF0C\u7B2C\u4E8C\u4E2A\u503C\u662Fkey\n\n\u52A0\u5BC6\u6D41\u7A0B\u548C\u5BC6\u94A5\uFF1B`[(3, 1), (0, 100), (4, 10), (7, 0), (5, 101), (8, 1), (1, 3), (6, 50), (2, 2)]`\n\n## **\u52A0\u5BC6\u7B97\u6CD5\u90E8\u5206\u89E3\u6790(\u5DF2\u89E3\u51B3)**\n\n\u62DC\u8BFB\u5927\u4F6Cwp\uFF0C\u4F46\u662F\u5948\u4F55\u5927\u4F6C\u7684\u4EE3\u7801\u8DD1\u4E0D\u8D77\u6765\uFF0C\u800C\u4E14\u6700\u7EC8\u52A0\u5BC6\u540E\u7684flag\u6570\u636E\u5BF9\u6BD4\u7684\u4F4D\u7F6E\u548C\u52A0\u5BC6\u540E\u7684\u6570\u636E\u4E5F\u4E0D\u77E5\u9053\u600E\u4E48\u6765\u7684\uFF0C\u6700\u540E\u65E0\u5948\u653E\u5F03QAQ\n\n\u62DC\u8BFB\u5927\u4F6Cwp\uFF1A[\u200C\u202C\u200B\u200C\uFEFF\u200B\u200B\u200B\u200D\u2060\u200B\u200B\u200B\u2060\u200B\u200D\u200B\u202C\u202C\u200D\u200B\u200B\u200B\u200C\u2060\u200C\u200B\u200B\uFEFF\uFEFF\u200B\u200B\u200B\u202C\u2060\u200B\u200B\u200B\u200B\u200D\u200B\u200D\u200B\uFEFF\u200B\u200B\u2060\u200D\u200B\u200B2024 05.27 jqctf \u521D\u8D5B wp - LaoGong - \u98DE\u4E66\u4E91\u6587\u6863 (feishu.cn)](https://ycznkvrmzo.feishu.cn/docx/ZqU0dU0h2oW3eFxZtZMctShFnyh)\n\n\u6700\u540E\u7ECF\u8FC7\u5927\u4F6C\u7684\u6307\u70B9\u7EC8\u4E8E\u6210\u529F\u4E86\uFF01\uFF01\u5269\u4E0B\u7684\u5C31\u662F\u7B97\u6CD5\u5B66\u4E60\u4E86\uFF01\n\n\u5B89\u88C5\u73AF\u5883\uFF1A\n\n```\n\u250C\u2500\u2500(kali\u327Fkali)-[~/tools]\n\u2514\u2500$ git clone https://github.com/IchildYu/load-elf.git\n\u6B63\u514B\u9686\u5230 \'load-elf\'...\nremote: Enumerating objects: 40, done.\nremote: Counting objects: 100% (40/40), done.\nremote: Compressing objects: 100% (37/37), done.\nremote: Total 40 (delta 18), reused 0 (delta 0), pack-reused 0\n\u63A5\u6536\u5BF9\u8C61\u4E2D: 100% (40/40), 13.93 KiB | 6.97 MiB/s, \u5B8C\u6210.\n\u5904\u7406 delta \u4E2D: 100% (18/18), \u5B8C\u6210.\n\n```\n\n```\n\u250C\u2500\u2500(kali\u327Fkali)-[~/tools/load-elf]\n\u2514\u2500$ gcc ./x64_main.c -o lib -g -ldl -masm=intel -shared -fPIC\n\n```\n\n\u6210\u529F\u8DD1\u51FAflag\uFF0C\u6E90\u7801\u5728\u4E0B\u9762\uFF1A\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_RK9HQRZRRBQ5FFJ.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_RK9HQRZRRBQ5FFJ.jpg)\n\npython\uFF1A\n\n| 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117 | **`def`**\xA0`dump_bin(bin):\xA0\xA0\xA0\xA0d\xA0**=**`\xA0`[]\xA0\xA0\xA0\xA0pc\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0**while**`\xA0`pc <\xA0len(bin):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0op\xA0**=**`\xA0`bin[pc]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'#\', pc, op)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'b = func[%d]()\' % (op | 0x100))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0type`\xA0**`=`**\xA0`bin[pc\xA0**+**`\xA0`1]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`type`\xA0**`==`**\xA0`2`\xA0**`or`**\xA0`type`\xA0**`==`**\xA0`0:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# missing bin[pc + 2]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'a = func[%d](%d)\' % (op, bin[pc + 3]))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`4\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0size\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`2]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0s\xA0**=**`\xA0`bin[pc\xA0**+**`\xA0`3: pc\xA0**+**`\xA0`3`\xA0**`+`**\xA0`size]\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'a = func[%d](%s)\' % (op, repr(s)))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(\'b = xor(b)\')\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0key\xA0**=**`\xA0`0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`i\xA0**in**`\xA0`s: key ^**=**`\xA0`i\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3`\xA0**`+`**\xA0`size\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0pc\xA0**+=**`\xA0`3\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`False\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0d.append((op, key))\xA0\xA0\xA0\xA0**return**`\xA0`d`\xA0**`def`**\xA0`g(x, n):\xA0\xA0\xA0\xA0**return**`\xA0`(x >> n) &\xA01`\xA0**`def`**\xA0`s(x, n):\xA0\xA0\xA0\xA0**return**`\xA0`(x &\xA01) << n`\xA0**`def`**\xA0`swapbit(x, m, n):\xA0\xA0\xA0\xA0**if**`\xA0`m\xA0**==**`\xA0`n:\xA0**return**`\xA0`x\xA0\xA0\xA0\xA0**return**`\xA0`s(g(x, m), n) | s(g(x, n), m) | (x & ~(s(1, n) | s(1, m)))`\xA0**`def`**\xA0`swapkeep(x, mask):\xA0\xA0\xA0\xA0swapbits\xA0**=**`\xA0`~mask &\xA00xff\xA0\xA0\xA0\xA0m\xA0**=**`\xA0`swapbits.bit_length()\xA0**-**`\xA0`1\xA0\xA0\xA0\xA0**assert**`\xA0`0`\xA0`<**=**`\xA0`m <\xA08\xA0\xA0\xA0\xA0swapbits ^**=**`\xA0`1`\xA0`<< m\xA0\xA0\xA0\xA0n\xA0**=**`\xA0`swapbits.bit_length()\xA0**-**`\xA0`1\xA0\xA0\xA0\xA0**assert**`\xA0`0`\xA0`<**=**`\xA0`n <\xA08\xA0\xA0\xA0\xA0swapbits ^**=**`\xA0`1`\xA0`<< n\xA0\xA0\xA0\xA0**assert**`\xA0`swapbits\xA0**==**`\xA0`0\xA0\xA0\xA0\xA0**return**`\xA0`swapbit(x, m, n)`\xA0**`def`**\xA0`ror1(x, n):\xA0\xA0\xA0\xA0n &**=**`\xA0`7\xA0\xA0\xA0\xA0**if**`\xA0`isinstance(x,\xA0int):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0x &**=**`\xA0`0xff\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`(x >> n) | (x << (8`\xA0**`-`**\xA0`n)) &\xA00xff\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`LShR(x, n) | (x << (8`\xA0**`-`**\xA0`n)) &\xA00xff`\xA0`entries\xA0**=**`\xA0`[\xA0\xA0\xA0\xA00x2efa,\xA0\xA0\xA0\xA00x42e9,\xA0\xA0\xA0\xA00x3428,\xA0\xA0\xA0\xA00x38fd,\xA0\xA0\xA0\xA00x2522,\xA0\xA0\xA0\xA00x480d,\xA0\xA0\xA0\xA00x4cc6,\xA0\xA0\xA0\xA00x3df6,\xA0\xA0\xA0\xA00x51df]`\xA0`bin`\xA0**`=`**\xA0`open(\'./bin\',\xA0\'rb\').read()_seq\xA0**=**`\xA0`dump_bin(bin)# print(_seq)`\xA0**`import`**\xA0`ctypes`\xA0`lib\xA0**=**`\xA0`ctypes.cdll.LoadLibrary(\'./lib\')# extern void setup();lib.setup()`\xA0**`def`**\xA0`encrypt(array, seq):\xA0\xA0\xA0\xA0**for**`\xA0`op, key\xA0**in**`\xA0`seq:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`i\xA0**in**`\xA0`range(38):\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0v\xA0**=**`\xA0`lib.bf_round(key, entries[op], i)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0type, val0, val1\xA0**=**`\xA0`v >>\xA016, (v >>\xA08) &\xA00xff, v &\xA00xff\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`type`\xA0**`==`**\xA0`0:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`val0\xA0**==**`\xA0`0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(i, \'c ^= 0x%x\' % val1)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[i] ^**=**`\xA0`val1\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`1:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(i, \'c = ror1(c, %d) ^ 0x%x\' % (val0, val1))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[i]\xA0**=**`\xA0`ror1(array[i], val0) ^ val1\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**elif**`\xA0`type`\xA0**`==`**\xA0`2:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0# print(i, \'c = swapkeep(c, 0x%x) ^ 0x%x\' % (val0, val1))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[i]\xA0**=**`\xA0`swapkeep(array[i], val0) ^ val1\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**else**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**`\xA0`False,\xA0type`\xA0**`from`**\xA0`z3\xA0**import**`\xA0**`***_array\xA0**=**`\xA0`[BitVec(\'x%d\'`\xA0**`%`**\xA0`i,\xA08)\xA0**for**`\xA0`i\xA0**in**`\xA0`range(38)]array\xA0**=**`\xA0`_array[:]encrypt(array, _seq)`\xA0`result\xA0**=**`\xA0`[226,\xA0125,\xA077,\xA072,\xA055,\xA0231,\xA0235,\xA0154,\xA0118,\xA05,\xA0125,\xA0135,\xA049,\xA0162,\xA0160,\xA077,\xA0248,\xA0159,\xA061,\xA0164,\xA056,\xA0139,\xA0225,\xA0229,\xA0136,\xA0139,\xA089,\xA0191,\xA04,\xA0222,\xA040,\xA0234,\xA0126,\xA0202,\xA0215,\xA0252,\xA0133,\xA0165]# print(len(result))`\xA0`s\xA0**=**`\xA0`Solver()**for**`\xA0`i\xA0**in**`\xA0`range(38):\xA0\xA0\xA0\xA0s.add(array[i]\xA0**==**`\xA0`result[i])`\xA0**`assert`**\xA0`s.check()\xA0**==**`\xA0`satmodel\xA0**=**`\xA0`s.model()# print(model)flag\xA0**=**`\xA0`[]**for**`\xA0`i\xA0**in**`\xA0`_array:\xA0\xA0\xA0\xA0flag.append(model[i].as_long())`\xA0`print(bytes(flag))# flag{3da8767cfb9424b9bbcc09008e36642d}` |\n| --- | --- |\n\nlib\u7684\u6E90\u7801\uFF1A\n\n|| `#include <stdio.h>#include <dlfcn.h>#include <string.h>#include <assert.h>#include <sys/mman.h>#include <fcntl.h>#include <unistd.h>#include <stdint.h>#include <stdlib.h>#include <stdarg.h>`\xA0`#define ERROR 0#define WARNING 1#define INFO 2#define DEBUG 3#define VERBOSE 4`\xA0**`const`**\xA0**`char*** LOG_LEVEL_CHARS =\xA0"EWIDV";**const**`\xA0**`char*** LOG_LEVEL_COLORS[] = {\xA0\xA0\xA0\xA0"\\x1b[31m",\xA0\xA0\xA0\xA0"\\x1b[33m",\xA0\xA0\xA0\xA0"\\x1b[32m",\xA0\xA0\xA0\xA0"\\x1b[0m",\xA0\xA0\xA0\xA0"\\x1b[34m",};**int**`\xA0`_log_level = INFO;**int**`\xA0`_log_color = 1;`\xA0**`void`**\xA0`set_log_level(**int**`\xA0`log_level) {\xA0\xA0\xA0\xA0**if**`\xA0`(log_level < 0) log_level = 0;\xA0\xA0\xA0\xA0**if**`\xA0`(log_level > 4) log_level = 4;\xA0\xA0\xA0\xA0_log_level = log_level;}`\xA0**`void`**\xA0`set_log_color(**int**`\xA0`log_color) {\xA0\xA0\xA0\xA0_log_color = log_color;}`\xA0**`void`**\xA0`Log(**int**`\xA0`log_level,\xA0**const**`\xA0**`char*** format, ...) {\xA0\xA0\xA0\xA0**if**`\xA0`(log_level < 0) log_level = 0;\xA0\xA0\xA0\xA0**if**`\xA0`(log_level > 4) log_level = 4;\xA0\xA0\xA0\xA0**if**`\xA0`(log_level > _log_level)\xA0**return**;\xA0\xA0\xA0\xA0**if**`\xA0`(_log_color)\xA0**printf**("%s", LOG_LEVEL_COLORS[log_level]);\xA0\xA0\xA0\xA0**printf**("[%c] ", LOG_LEVEL_CHARS[log_level]);\xA0\xA0\xA0\xA0**va_list**`\xA0`args;\xA0\xA0\xA0\xA0**va_start**(args, format);\xA0\xA0\xA0\xA0**vprintf**(format, args);\xA0\xA0\xA0\xA0**va_end**(args);\xA0\xA0\xA0\xA0**if**`\xA0`(_log_color)\xA0**printf**("\\x1b[0m");}`\xA0`#define LOGE(format, ...) Log(ERROR, format, ##__VA_ARGS__)#define LOGW(format, ...) Log(WARNING, format, ##__VA_ARGS__)#define LOGI(format, ...) Log(INFO, format, ##__VA_ARGS__)#define LOGD(format, ...) Log(DEBUG, format, ##__VA_ARGS__)#define LOGV(format, ...) Log(VERBOSE, format, ##__VA_ARGS__)`\xA0`// default info#define SET_LOGE() set_log_level(ERROR)#define SET_LOGW() set_log_level(WARNING)#define SET_LOGI() set_log_level(INFO)#define SET_LOGD() set_log_level(DEBUG)#define SET_LOGV() set_log_level(VERBOSE)`\xA0`// default on#define SET_LOGCOLOR_OFF() set_log_color(0)#define SET_LOGCOLOR_ON() set_log_color(1)`\xA0\xA0`#define R_NONE 0#define R_COPY 5#define R_GLOB_DAT 6#define R_JUMP_SLOT 7#define R_RELATIVE 8#define R_IRELATIVE 37`\xA0**`typedef`**\xA0`unsigned\xA0**char**`\xA0`uchar;**typedef**`\xA0`unsigned\xA0**short**`\xA0`ushort;**typedef**`\xA0`unsigned\xA0**int**`\xA0`uint;**typedef**`\xA0`unsigned\xA0**long**`\xA0**`long`**\xA0`ullong;`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0uchar e_ident[16];\xA0\xA0\xA0\xA0ushort e_type;\xA0\xA0\xA0\xA0ushort e_machine;\xA0\xA0\xA0\xA0uint e_version;\xA0\xA0\xA0\xA0**size_t**`\xA0`e_entry;\xA0\xA0\xA0\xA0**size_t**`\xA0`e_phoff;\xA0\xA0\xA0\xA0**size_t**`\xA0`e_shoff;\xA0\xA0\xA0\xA0uint e_flags;\xA0\xA0\xA0\xA0ushort e_ehsize;\xA0\xA0\xA0\xA0ushort e_phentsize;\xA0\xA0\xA0\xA0ushort e_phnum;\xA0\xA0\xA0\xA0ushort e_shentsize;\xA0\xA0\xA0\xA0ushort e_shnum;\xA0\xA0\xA0\xA0ushort e_shtrndx;} elf_header;`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0**size_t**`\xA0`d_tag;\xA0\xA0\xA0\xA0**size_t**`\xA0`d_un;} elf_dyn;`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0**size_t**`\xA0`r_offset;\xA0\xA0\xA0\xA0**size_t**`\xA0`r_info;} elf_rel;`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0**size_t**`\xA0`r_offset;\xA0\xA0\xA0\xA0**size_t**`\xA0`r_info;\xA0\xA0\xA0\xA0**size_t**`\xA0`r_addend;} elf_rela;`\xA0`// elf_sym.st_info#define elf_st_bind(info) ((info) >> 4)#define elf_st_type(info) ((info) & 0xf)`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0uint p_type;\xA0\xA0\xA0\xA0uint p_flags;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_offset;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_vaddr;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_paddr;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_filesz;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_memsz;\xA0\xA0\xA0\xA0**size_t**`\xA0`p_align;} elf_program_header;`\xA0**`typedef`**\xA0**`struct`**\xA0`{\xA0\xA0\xA0\xA0uint st_name;\xA0\xA0\xA0\xA0uchar st_info;\xA0\xA0\xA0\xA0uchar st_other;\xA0\xA0\xA0\xA0ushort shndx;\xA0\xA0\xA0\xA0**size_t**`\xA0`st_value;\xA0\xA0\xA0\xA0**size_t**`\xA0`st_size;} elf_sym;`\xA0`// elf_rel[a].r_info#define elf_r_sym(info) ((info) >> 32)#define elf_r_type(info) ((uint) (info))`\xA0**`int`**\xA0`do_reloc(**void*** base,\xA0**size_t**`\xA0`offset,\xA0**size_t**`\xA0`info,\xA0**size_t**`\xA0`addend,\xA0**const**`\xA0`elf_sym* symtab,\xA0**const**`\xA0**`char*** strtab) {\xA0\xA0\xA0\xA0#define sym (elf_r_sym(info))\xA0\xA0\xA0\xA0#define type (elf_r_type(info))\xA0\xA0\xA0\xA0#define value (symtab[sym].st_value)\xA0\xA0\xA0\xA0#define size (symtab[sym].st_size)\xA0\xA0\xA0\xA0#define name (strtab + symtab[sym].st_name)\xA0\xA0\xA0\xA0**switch**`\xA0`(type) {\xA0\xA0\xA0\xA0**case**`\xA0`R_NONE:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**case**`\xA0`R_COPY:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**memcpy**((**void***) ((**size_t**) base + offset), (**const**`\xA0**`void***) ((**size_t**) base + value), size);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**const**`\xA0**`void*** sym_value = dlsym((**void***) -1, name);\xA0// RTLD_DEFAULT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!sym_value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGW("failed to resolve symbol `%s\'.\\n", name);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**memcpy**((**void***) ((**size_t**) base + offset), sym_value, size);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**case**`\xA0`R_GLOB_DAT:\xA0\xA0\xA0\xA0**case**`\xA0`R_JUMP_SLOT:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = (**size_t**) base + value;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**const**`\xA0**`void*** sym_value = dlsym((**void***) -1, name);\xA0// RTLD_DEFAULT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!sym_value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGW("failed to resolve symbol `%s\'.\\n", name);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = (**size_t**) sym_value;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**case**`\xA0`R_RELATIVE:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = (**size_t**) base + addend;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**case**`\xA0`R_IRELATIVE:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = ((**size_t**`\xA0`(*)()) ((**size_t**) base + addend))();\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**case**`\xA0`1:\xA0// R_X86_64_64\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = (**size_t**) base + value + addend;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**const**`\xA0**`void*** sym_value = dlsym((**void***) -1, name);\xA0// RTLD_DEFAULT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!sym_value) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGW("failed to resolve symbol `%s\'.\\n", name);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0*(**size_t***) ((**size_t**) base + offset) = (**size_t**) sym_value + addend;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0**default**:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGW("unimplemented reloc type: %d.\\n", type);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0#undef sym\xA0\xA0\xA0\xA0#undef type\xA0\xA0\xA0\xA0#undef value\xA0\xA0\xA0\xA0#undef size\xA0\xA0\xA0\xA0#undef name\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0\xA0`#define SKIP_LOAD_WITH_DL`\xA0**`void*** load_with_dl(**const**`\xA0**`char*** path) {\xA0\xA0\xA0\xA0#ifdef SKIP_LOAD_WITH_DL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGD("SKIP_LOAD_WITH_DL defined, load_with_dl returns NULL.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0#endif\xA0\xA0\xA0\xA0LOGI("loading %s with dlopen...\\n", path);\xA0\xA0\xA0\xA0**void*** handle = dlopen(path, RTLD_LAZY);\xA0\xA0\xA0\xA0**if**`\xA0`(handle == NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("load_with_dl failed: %s.\\n", dlerror());\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**void*** base = *(**void****) handle;\xA0\xA0\xA0\xA0LOGI("done, loaded at %p.\\n", base);\xA0\xA0\xA0\xA0**return**`\xA0`base;}`\xA0**`int`**\xA0`check_header(elf_header* header) {\xA0\xA0\xA0\xA0**if**`\xA0`(*(uint*) header->e_ident != 0x464c457f) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("elf magic header not detected.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**if**`\xA0`(header->e_ident[4] != (**sizeof**(**void***) / 4)) {\xA0// ei_class, 1: ELFCLASS32, 2: ELFCLASS64\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("elf class mismatch.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**if**`\xA0`(header->e_ident[5] != 1) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("LSB expected.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**if**`\xA0`(header->e_type != 2 && header->e_type != 3) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("Dynamic library or executable expected.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**if**`\xA0`(header->e_ehsize !=\xA0**sizeof**(elf_header)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("Unexpected header size.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0**`const`**\xA0`elf_dyn* find_dyn_entry(**const**`\xA0`elf_dyn* dyn,\xA0**int**`\xA0`type) {\xA0\xA0\xA0\xA0**for**`\xA0`(; dyn->d_tag != 0; dyn++) {\xA0// DT_NULL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(dyn->d_tag == type)\xA0**return**`\xA0`dyn;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**return**`\xA0`NULL;}`\xA0**`int`**\xA0`do_rel(**void*** base,\xA0**const**`\xA0`elf_rel* rel,\xA0**int**`\xA0`count,\xA0**const**`\xA0`elf_sym* symtab,\xA0**const**`\xA0**`char*** strtab) {\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < count; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!do_reloc(base, rel[i].r_offset, rel[i].r_info, *(**size_t***) ((**size_t**) base + rel[i].r_offset), symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0**`int`**\xA0`do_rela(**void*** base,\xA0**const**`\xA0`elf_rela* rela,\xA0**int**`\xA0`count,\xA0**const**`\xA0`elf_sym* symtab,\xA0**const**`\xA0**`char*** strtab) {\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < count; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!do_reloc(base, rela[i].r_offset, rela[i].r_info, rela[i].r_addend, symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0**`int`**\xA0`check_and_do_rel(**void*** base,\xA0**const**`\xA0`elf_dyn* dyn,\xA0**const**`\xA0`elf_rel* rel,\xA0**const**`\xA0`elf_sym* symtab,\xA0**const**`\xA0**`char*** strtab) {\xA0\xA0\xA0\xA0**if**`\xA0`(find_dyn_entry(dyn, 0x13)->d_un !=\xA0**sizeof**(elf_rel)) {\xA0// DT_RELENT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected rel table entry size.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0LOGD("do rel.\\n");\xA0\xA0\xA0\xA0**int**`\xA0`rel_count = find_dyn_entry(dyn, 0x12)->d_un /\xA0**sizeof**(elf_rel);\xA0// DT_RELSZ\xA0\xA0\xA0\xA0**if**`\xA0`(!do_rel(base, rel, rel_count, symtab, strtab))\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0**`int`**\xA0`check_and_do_rela(**void*** base,\xA0**const**`\xA0`elf_dyn* dyn,\xA0**const**`\xA0`elf_rela* rela,\xA0**const**`\xA0`elf_sym* symtab,\xA0**const**`\xA0**`char*** strtab) {\xA0\xA0\xA0\xA0**if**`\xA0`(find_dyn_entry(dyn, 0x9)->d_un !=\xA0**sizeof**(elf_rela)) {\xA0// DT_RELAENT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected rela table entry size.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0LOGD("do rela.\\n");\xA0\xA0\xA0\xA0**int**`\xA0`rela_count = find_dyn_entry(dyn, 0x8)->d_un /\xA0**sizeof**(elf_rela);\xA0// DT_RELASZ\xA0\xA0\xA0\xA0**if**`\xA0`(!do_rela(base, rela, rela_count, symtab, strtab))\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0**`int`**\xA0`load_dynamic(**void*** base,\xA0**const**`\xA0`elf_dyn* dyn) {\xA0\xA0\xA0\xA0**const**`\xA0`elf_dyn* res = find_dyn_entry(dyn, 5);\xA0// DT_STRTAB\xA0\xA0\xA0\xA0**if**`\xA0`(res == NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("string table not found.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**const**`\xA0**`char*** strtab = (**const**`\xA0**`char***) ((**size_t**) base + res->d_un);`\xA0\xA0\xA0\xA0\xA0`**const**`\xA0`elf_sym* symtab = NULL;\xA0\xA0\xA0\xA0res = find_dyn_entry(dyn, 0x6);\xA0// DT_SYMTAB\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0symtab = (**const**`\xA0`elf_sym*) ((**size_t**) base + res->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(find_dyn_entry(dyn, 0xB)->d_un !=\xA0**sizeof**(elf_sym)) {\xA0// DT_SYMENT\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected symbol table entry size.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`**for**`\xA0`(**const**`\xA0`elf_dyn* it = dyn; it->d_tag != 0; it++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(it->d_tag != 1)\xA0**continue**;\xA0// DT_NEEDED: name of needed library\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGD("loading needed library `%s\'.\\n", strtab + it->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!dlopen(strtab + it->d_un, RTLD_NOW | RTLD_GLOBAL))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGW("failed to load needed library `%s\': %s.\\n", strtab + it->d_un, dlerror());\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`**int**`\xA0`rel_done = 0;\xA0\xA0\xA0\xA0**for**`\xA0`(**const**`\xA0`elf_dyn* it = dyn; it->d_tag != 0; it++) {\xA0// DT_NULL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**switch**`\xA0`(it->d_tag) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**case**`\xA0`7:\xA0// DT_RELA\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(rel_done)\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!check_and_do_rela(base, dyn, (**const**`\xA0`elf_rela*) ((**size_t**) base + it->d_un), symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0rel_done = 1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**case**`\xA0`0x11:\xA0// DT_REL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(rel_done)\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!check_and_do_rel(base, dyn, (**const**`\xA0`elf_rel*) ((**size_t**) base + it->d_un), symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0rel_done = 1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**case**`\xA0`0x17:\xA0// DT_JMPREL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**size_t**`\xA0`plt_rel_size = find_dyn_entry(dyn, 0x2)->d_un;\xA0// DT_PLTRELSZ\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`plt_rel = find_dyn_entry(dyn, 0x14)->d_un;\xA0// DT_PLTREL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(plt_rel == 0x11) {\xA0// DT_REL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!rel_done) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0res = find_dyn_entry(dyn, 0x11);\xA0// DT_REL\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!check_and_do_rel(base, dyn, (**const**`\xA0`elf_rel*) ((**size_t**) base + res->d_un), symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0rel_done = 1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0plt_rel_size /=\xA0**sizeof**(elf_rel);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGD("do jmprel with rel.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!do_rel(base, (elf_rel*) ((**size_t**) base + it->d_un), plt_rel_size, symtab, strtab))\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0**`if`**\xA0`(plt_rel == 7) {\xA0// DT_RELA\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!rel_done) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0res = find_dyn_entry(dyn, 7);\xA0// DT_RELA\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!check_and_do_rela(base, dyn, (**const**`\xA0`elf_rela*) ((**size_t**) base + res->d_un), symtab, strtab))\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0rel_done = 1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0plt_rel_size /=\xA0**sizeof**(elf_rela);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGD("do jmprel with rela.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!do_rela(base, (elf_rela*) ((**size_t**) base + it->d_un), plt_rel_size, symtab, strtab))\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected plt rel type: %d.\\n", plt_rel);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`res = find_dyn_entry(dyn, 0xC);\xA0// DT_INIT\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void**`\xA0`(*init)() = (**void**`\xA0`(*)()) ((**size_t**) base + res->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("init proc detected: %p.\\n", init);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`choice =\xA0\'y\';\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**do**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("Execute init proc? [(y)es/(n)o] ");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0choice =\xA0**getchar**();\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice !=\xA0\'\\n\')\xA0**while**`\xA0`(**getchar**() !=\xA0\'\\n\') ;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice >=\xA0\'A\'`\xA0`&& choice <=\xA0\'Z\') choice += 0x20;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**while**`\xA0`(choice !=\xA0\'y\'`\xA0`&& choice !=\xA0\'n\');\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice ==\xA0\'y\') init();\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`res = find_dyn_entry(dyn, 0x19);\xA0// DT_INIT_ARRAY\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void**`\xA0`(**init_array)() = (**void**`\xA0`(**)()) ((**size_t**) base + res->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`count = find_dyn_entry(dyn, 0x1B)->d_un /\xA0**sizeof**(**size_t**);\xA0// DT_INIT_ARRAYSZ\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**while**`\xA0`(*init_array == NULL && count) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0init_array++;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0count--;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(count) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("init array detected:\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`choice =\xA0\'?\';\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < count; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(!init_array[i])\xA0**continue**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**while**`\xA0`(choice !=\xA0\'y\'`\xA0`&& choice !=\xA0\'n\'`\xA0`&& choice !=\xA0\'a\'`\xA0`&& choice !=\xA0\'o\') {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("\\texecute function %p? [(y)es/(n)o/(a)ll items left/n(o)ne items left] ", init_array[i]);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0choice =\xA0**getchar**();\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice !=\xA0\'\\n\')\xA0**while**`\xA0`(**getchar**() !=\xA0\'\\n\') ;\xA0// skip line\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice >=\xA0\'A\'`\xA0`&& choice <=\xA0\'Z\') choice += 0x20;\xA0// convert to lower case\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`((uchar) (choice -\xA0\'n\') > 2) {\xA0// \'y\' or \'a\'\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("\\texecuting function at %p...\\n", init_array[i]);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0init_array[i]();\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(choice ==\xA0\'y\') choice =\xA0\'?\';\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0**`if`**\xA0`(choice ==\xA0\'n\') choice =\xA0\'?\';\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`res = find_dyn_entry(dyn, 0xD);\xA0// DT_FINI\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void**`\xA0`(*fini)() = (**void**`\xA0`(*)()) ((**size_t**) base + res->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("fini proc detected: %p.\\n", fini);\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`res = find_dyn_entry(dyn, 0x1A);\xA0// DT_FINI_ARRAY\xA0\xA0\xA0\xA0**if**`\xA0`(res != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void**`\xA0`(**fini_array)() = (**void**`\xA0`(**)()) ((**size_t**) base + res->d_un);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`count = find_dyn_entry(dyn, 0x1C)->d_un /\xA0**sizeof**(**size_t**);\xA0// DT_FINI_ARRAYSZ\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**while**`\xA0`(*fini_array == NULL && count) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0fini_array++;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0count--;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(count) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("fini array detected:\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < count; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(fini_array[i]) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGI("\\t%p\\n", fini_array[i]);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0LOGI("load_dynamic done.\\n");\xA0\xA0\xA0\xA0**return**`\xA0`1;}`\xA0`#define MMAP_LOAD_BASE ((void*) 0xC0000000)**void*** load_with_mmap(**const**`\xA0**`char*** path) {\xA0\xA0\xA0\xA0LOGI("loading %s with mmap...\\n", path);\xA0\xA0\xA0\xA0**int**`\xA0`fd = open(path, O_RDONLY);\xA0\xA0\xA0\xA0LOGV("open(path, O_RDONLY) returns %d\\n", fd);`\xA0\xA0\xA0\xA0\xA0`elf_header header;\xA0\xA0\xA0\xA0LOGV("reading elf header from file...\\n");\xA0\xA0\xA0\xA0**if**`\xA0`(read(fd, &header,\xA0**sizeof**(header)) !=\xA0**sizeof**(header)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("read header error\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0LOGV("checking elf header...\\n");\xA0\xA0\xA0\xA0**if**`\xA0`(!check_header(&header)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`elf_program_header pheader;\xA0\xA0\xA0\xA0elf_dyn* dyn = NULL;`\xA0\xA0\xA0\xA0\xA0`**int**`\xA0`e_phentsize = header.e_phentsize;\xA0\xA0\xA0\xA0**int**`\xA0`e_phnum = header.e_phnum;`\xA0\xA0\xA0\xA0\xA0`**if**`\xA0`(e_phentsize !=\xA0**sizeof**(pheader)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected program header size.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`LOGV("determine LOAD_BASE...\\n");\xA0\xA0\xA0\xA0**void*** base = MMAP_LOAD_BASE;\xA0\xA0\xA0\xA0**while**`\xA0`(base != mmap(base, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0base = (**void***) ((**size_t**) base + 0x1000000);\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0munmap(base, 0x1000);\xA0\xA0\xA0\xA0LOGD("trying loading at %p\\n", base);`\xA0\xA0\xA0\xA0\xA0`lseek(fd, header.e_phoff, SEEK_SET);\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < e_phnum; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGV("processing phdr %d...\\n", i);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(read(fd, &pheader,\xA0**sizeof**(pheader)) !=\xA0**sizeof**(pheader)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("read pheader error\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader.p_type != 1 || pheader.p_memsz == 0) {\xA0// not PT_LOAD or nothing to load\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader.p_type == 2) {\xA0// DYNAMIC\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(dyn != NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("duplicated DYNAMIC PHT detected.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0**else**`\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0dyn = (elf_dyn*) ((**size_t**) base + pheader.p_vaddr);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**continue**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void*** addr = (**void***) (((**size_t**) base + pheader.p_vaddr) & ~0xfff);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**int**`\xA0`offset = pheader.p_vaddr & 0xfff;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**size_t**`\xA0`size = (offset + pheader.p_filesz + 0xfff) & ~0xfff;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(addr != mmap(addr, size, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE, fd, pheader.p_offset - offset)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0// if (addr != mmap(addr, pheader.p_memsz + offset, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE, fd, pheader.p_offset - offset)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0// if ((uchar*) addr != (uchar*) base + pheader.p_vaddr) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("failed to mmap 0x%lx to 0x%lx.\\n", pheader.p_offset, pheader.p_vaddr + (**size_t**) base);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(offset) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**memset**(addr, 0, offset);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader.p_memsz != pheader.p_filesz) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader.p_memsz < pheader.p_filesz) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("unexpected: filesz bigger than memsz.\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader.p_memsz + offset > size) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGV("mmap extra pages in memory\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0addr = (**void***) ((**size_t**) addr + size);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(addr != mmap(addr, pheader.p_memsz + offset - size, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANON | MAP_SHARED, -1, 0)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("failed to mmap 0x%lx to 0x%lx.\\n", pheader.p_offset, pheader.p_vaddr + (**size_t**) base);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0close(fd);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGV("testing memory...\\n");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**char**`\xA0`c = *(unsigned\xA0**char***) (pheader.p_vaddr + (**size_t**) base);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0c = *(unsigned\xA0**char***) (pheader.p_vaddr + (**size_t**) base + pheader.p_filesz - 1);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0c = *(unsigned\xA0**char***) (pheader.p_vaddr + (**size_t**) base + pheader.p_memsz - 1);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGD("mmaped 0x%lx to 0x%lx, filesz 0x%lx, memsz 0x%lx\\n", pheader.p_offset, pheader.p_vaddr + (**size_t**) base, pheader.p_filesz, pheader.p_memsz);\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0LOGI("done, loaded at %p\\n", base);\xA0\xA0\xA0\xA0close(fd);`\xA0\xA0\xA0\xA0\xA0`**if**`\xA0`(!dyn)\xA0**return**`\xA0`base;`\xA0\xA0\xA0\xA0\xA0`LOGI("DYNAMIC detected, loading...\\n");\xA0\xA0\xA0\xA0**if**`\xA0`(!load_dynamic(base, dyn))\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0**return**`\xA0`base;}`\xA0**`const`**\xA0`elf_dyn* get_dyn(**void*** base) {\xA0\xA0\xA0\xA0elf_header* header = (elf_header*) base;\xA0\xA0\xA0\xA0**int**`\xA0`e_phnum = header->e_phnum;\xA0\xA0\xA0\xA0elf_program_header* pheader = (elf_program_header*) ((**size_t**) base + header->e_phoff);\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < e_phnum; i++, pheader++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(pheader->p_type == 2) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`(elf_dyn*) ((**size_t**) base + pheader->p_vaddr);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}}`\xA0**`void*** get_symbol_by_name(**void*** base,\xA0**const**`\xA0**`char*** symbol) {\xA0\xA0\xA0\xA0**const**`\xA0`elf_dyn* dyn = get_dyn(base);\xA0\xA0\xA0\xA0**const**`\xA0**`char*** strtab = (**const**`\xA0**`char***) (find_dyn_entry(dyn, 5)->d_un);\xA0// DT_STRTAB`\xA0\xA0\xA0\xA0\xA0`**if**`\xA0`(strtab < (**const**`\xA0**`char***) base)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0strtab = (**const**`\xA0**`char***) strtab + (**size_t**) base;\xA0\xA0\xA0\xA0**size_t**`\xA0`strsz = find_dyn_entry(dyn, 0xa)->d_un;\xA0// DT_STRSZ\xA0\xA0\xA0\xA0**const**`\xA0`elf_sym* symtab = (**const**`\xA0`elf_sym*) (find_dyn_entry(dyn, 6)->d_un);\xA0// DT_SYMTAB\xA0\xA0\xA0\xA0**if**`\xA0`((**const**`\xA0**`char***) symtab < (**const**`\xA0**`char***) base)\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0symtab = (**const**`\xA0`elf_sym*) ((**const**`\xA0**`char***) symtab + (**size_t**) base);`\xA0\xA0\xA0\xA0\xA0`**for**`\xA0`(; ; symtab++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(symtab->st_name == 0)\xA0**continue**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(symtab->st_name >= strsz) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("failed to resolve symbol `%s\' from library (%p): not found.\\n", symbol, base);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(**strcmp**(strtab + symtab->st_name, symbol) == 0) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(symtab->st_value == 0) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0LOGE("failed to resolve symbol `%s\' from library (%p): value is NULL.\\n", symbol, base);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`NULL;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(elf_st_type(symtab->st_info) != 10) {\xA0// STT_GNU_IFUNC\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`(**void***) ((**size_t**) base + symtab->st_value);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`((**void*** (*)()) ((**size_t**) base + symtab->st_value))();\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}}`\xA0**`void*** get_symbol_by_offset(**void*** base,\xA0**size_t**`\xA0`offset) {\xA0\xA0\xA0\xA0**return**`\xA0`(**void***) ((**size_t**) base + offset);}`\xA0**`void*** load_elf(**const**`\xA0**`char*** elf_path) {\xA0\xA0\xA0\xA0**void*** base = load_with_dl(elf_path);\xA0\xA0\xA0\xA0**if**`\xA0`(base == NULL) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0base = load_with_mmap(elf_path);\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0//assert(base != NULL && *(unsigned int*) base == 0x464c457f);\xA0\xA0\xA0\xA0**return**`\xA0`base;}`\xA0\xA0`// gcc ./x64_main.c -o main -g -ldl__asm__(\xA0\xA0\xA0\xA0"__round:\\n"\xA0\xA0\xA0\xA0"sub rsp, 0x10\\n"\xA0\xA0\xA0\xA0"mov [rsp+0x8], rdi\\n"\xA0\xA0\xA0\xA0"mov r12, rsi\\n"\xA0\xA0\xA0\xA0"call rdx\\n"\xA0\xA0\xA0\xA0"add rsp, 0x10\\n"\xA0\xA0\xA0\xA0"ret\\n");`\xA0**`void`**\xA0`__round(unsigned\xA0**char*** array,\xA0**int**`\xA0`key,\xA0**void*** entry);`\xA0**`extern`**\xA0**`int`**\xA0`bf_round(**int**`\xA0`key,\xA0**int**`\xA0`offset,\xA0**int**`\xA0`index);**extern**`\xA0**`void`**\xA0`setup();**extern**`\xA0**`void`**\xA0`one_round(unsigned\xA0**char*** array,\xA0**int**`\xA0`key,\xA0**int**`\xA0`offset);`\xA0**`static`**\xA0**`char*** base;`\xA0**`void`**\xA0`setup() {\xA0\xA0\xA0\xA0// SET_LOGE();\xA0\xA0\xA0\xA0**const**`\xA0**`char*** path =\xA0"./libentry.so";\xA0\xA0\xA0\xA0base = load_elf(path);\xA0\xA0\xA0\xA0*(base + 0x2a07) = 0xc3;\xA0// ret}`\xA0**`void`**\xA0`one_round(unsigned\xA0**char*** array,\xA0**int**`\xA0`key,\xA0**int**`\xA0`offset) {\xA0\xA0\xA0\xA0**if**`\xA0`(base == NULL) setup();\xA0\xA0\xA0\xA0__round(array, key, base + offset);}`\xA0`unsigned\xA0**char**`\xA0`g(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`n) {\xA0\xA0\xA0\xA0**return**`\xA0`(x >> n) & 1;}`\xA0`unsigned\xA0**char**`\xA0`s(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`n) {\xA0\xA0\xA0\xA0**return**`\xA0`(x & 1) << n;}`\xA0`unsigned\xA0**char**`\xA0`swapbit(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`m, unsigned\xA0**char**`\xA0`n) {\xA0\xA0\xA0\xA0**if**`\xA0`(m == n)\xA0**return**`\xA0`x;\xA0\xA0\xA0\xA0**return**`\xA0`s(g(x, m), n) | s(g(x, n), m) | (x & ~(s(1, n) | s(1, m)));}`\xA0`unsigned\xA0**char**`\xA0`bit_length(unsigned\xA0**char**`\xA0`x) {\xA0\xA0\xA0\xA0**if**`\xA0`(x == 0)\xA0**return**`\xA0`0;\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 8; i > 0; i--) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(x & (1 << (i - 1)))\xA0**return**`\xA0`i;\xA0\xA0\xA0\xA0}}`\xA0`unsigned\xA0**char**`\xA0`swapkeep(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`mask) {\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`swapbits = ~mask & 0xff;\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`m = bit_length(swapbits) - 1;\xA0\xA0\xA0\xA0**assert**(0 <= m && m < 7);\xA0\xA0\xA0\xA0swapbits ^= 1 << m;\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`n = bit_length(swapbits) - 1;\xA0\xA0\xA0\xA0**assert**(0 <= n && n < 7);\xA0\xA0\xA0\xA0swapbits ^= 1 << n;\xA0\xA0\xA0\xA0**assert**(swapbits == 0);\xA0\xA0\xA0\xA0**return**`\xA0`swapbit(x, m, n);}`\xA0`unsigned\xA0**char**`\xA0`ror1(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`n) {\xA0\xA0\xA0\xA0n &= 7;\xA0\xA0\xA0\xA0x &= 0xff;\xA0\xA0\xA0\xA0**return**`\xA0`(x >> n) | (x << (8 - n)) & 0xff;}`\xA0`unsigned\xA0**char**`\xA0`rol1(unsigned\xA0**char**`\xA0`x, unsigned\xA0**char**`\xA0`n) {\xA0\xA0\xA0\xA0**return**`\xA0`ror1(x, 8 - n);}`\xA0`#define XOR 0 // c ^ val0 ^ val1#define ROT 1 // ror1(c, val0) ^ val1#define SWP 2 // swapkeep(c, val0) ^ val1#define MAKE_RET_VAL(type, val0, val1) (((type) << 16) | ((val0) << 8) | (val1))`\xA0**`int`**\xA0`bf_round(**int**`\xA0`key,\xA0**int**`\xA0`offset,\xA0**int**`\xA0`index) {\xA0\xA0\xA0\xA0**if**`\xA0`(base == NULL) setup();\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`array[38];\xA0\xA0\xA0\xA0array[index] = 0;\xA0\xA0\xA0\xA0__round(array, key, base + offset);\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`val1 = array[index];`\xA0\xA0\xA0\xA0\xA0`**int**`\xA0`flag = 0;\xA0\xA0\xA0\xA0// test xor\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < 7; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] = 1 << i;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0__round(array, key, base + offset);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] ^= val1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(array[index] != (1 << i)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0flag = 1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**if**`\xA0`(flag == 0) {\xA0// XOR\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`MAKE_RET_VAL(XOR, 0, val1);\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`// test rol1\xA0\xA0\xA0\xA0array[index] = 1;\xA0\xA0\xA0\xA0__round(array, key, base + offset);\xA0\xA0\xA0\xA0array[index] ^= val1;\xA0\xA0\xA0\xA0unsigned\xA0**char**`\xA0`val0 = bit_length(array[index]);\xA0\xA0\xA0\xA0**assert**(val0 != 0);\xA0\xA0\xA0\xA0val0--;\xA0\xA0\xA0\xA0**if**`\xA0`(val0 != 0) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**(array[index] == (1 << val0));\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 1; i < 7; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] = 1 << i;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0__round(array, key, base + offset);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] ^= val1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(array[index] != (1 << ((i + val0) % 8))) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0flag = 0;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**break**;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(flag == 1) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`MAKE_RET_VAL(ROT, 8 - val0, val1);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}`\xA0\xA0\xA0\xA0\xA0`// swapkeep\xA0\xA0\xA0\xA0**for**`\xA0`(**int**`\xA0`i = 0; i < 7; i++) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] = 1 << i;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0__round(array, key, base + offset);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0array[index] ^= val1;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**if**`\xA0`(array[index] != (1 << i)) {\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**(bit_length(array[index]));\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**assert**(array[index] == (1 << (bit_length(array[index]) - 1)));\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0val0 = ~((1 << i) | array[index]);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**return**`\xA0`MAKE_RET_VAL(SWP, val0, val1);\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0**assert**(0);}`\xA0`// gcc ./x64_main.c -o lib -g -ldl -masm=intel -shared**int**`\xA0`main() {\xA0\xA0\xA0\xA0{\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**const**`\xA0**`char*** path =\xA0"/lib/x86_64-linux-gnu/libm.so.6";\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**void*** base = load_elf(path);`\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0`**double**`\xA0`(***pow**)(**double**,\xA0**double**) = get_symbol_by_name(base,\xA0"pow");\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**double**`\xA0`a = 3.14159;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**double**`\xA0`b = a;\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0**printf**("%g ** %g == %g\\n", a, b,\xA0**pow**(a, b));\xA0\xA0\xA0\xA0}\xA0\xA0\xA0\xA0/**/`\xA0\xA0\xA0\xA0\xA0`**const**`\xA0**`char*** path =\xA0"/lib/x86_64-linux-gnu/libc++.so.1";\xA0\xA0\xA0\xA0**void*** base = load_elf(path);\xA0\xA0\xA0\xA0**void*** std_cout = get_symbol_by_name(base,\xA0"_ZNSt3__14coutE");\xA0\xA0\xA0\xA0// offset may be different\xA0\xA0\xA0\xA0// std::ostream::operator<<(int)\xA0\xA0\xA0\xA0**void*** (*print_int)(**void***,\xA0**int**) = get_symbol_by_offset(base, 0x5e380);\xA0\xA0\xA0\xA0// std::ostream::put(char)\xA0\xA0\xA0\xA0**void*** (*print_char)(**void***,\xA0**char**) = get_symbol_by_offset(base, 0x5f510);\xA0\xA0\xA0\xA0print_char(print_int(std_cout, 114514),\xA0\'\\n\');\xA0\xA0\xA0\xA0/**/`\xA0\xA0\xA0\xA0\xA0`**puts**("done.");\xA0\xA0\xA0\xA0**return**`\xA0`0;}` |\n| --- | --- |\n\n\u6700\u7EC8\u62A5\u9519\uFF1A\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_V44V9YYB79FNWXD.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_V44V9YYB79FNWXD.jpg)\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_FAPS9MWS4U673DU.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_FAPS9MWS4U673DU.jpg)\n\n\u89E3\u51B3\u65B9\u6848\uFF1A\n\narm\u67B6\u6784\u4E0B\u7684\u4F2A\u4EE3\u7801\u53EF\u4EE5\u53D1\u73B0\u6570\u636E\u5BF9\u6BD4\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_WH29RTDRBJTUYTK.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_WH29RTDRBJTUYTK.jpg)\n\n\u53D1\u73B0\u4E00\u4E2Aida\u5C0F\u6280\u5DE7\uFF1A\n\n\u70B9\u51FBCollapse declarations\u53EF\u4EE5\u628A\u8D85\u957F\u7684\u53D8\u91CF\u58F0\u660E\u7F29\u51CF\u6210\u4E00\u884C\uFF01\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_ZKSJYPP2ASJBY8R.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_ZKSJYPP2ASJBY8R.jpg)\n\n![https://bbs.kanxue.com/upload/attach/202406/970470_N72MMKDA9PAUE4V.jpg](https://bbs.kanxue.com/upload/attach/202406/970470_N72MMKDA9PAUE4V.jpg)';export{e as _};
